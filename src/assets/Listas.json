[
    {
      "title": "Lista simple",
      "code": "",
      "sources": "https://www.infor.uva.es/~belar/Ampliacion/TDAS/T6_TDA_Lista.pdf",
      "inPutData": {
        "images":[
        ]
      },
      "outPutData": {
        "images":[
        ]
      },
      "data":[
        {
          "subtitle":"",
          "body": "Una lista sencilla es aquella en la que sus nodos se encuentran enlazados únicamente por una liga, es decir, tiene un nodo apuntando al siguiente y así sucesivamente",
          "images": []
        },
        {
            "subtitle":"",
            "body":"Una lista simple puede ser implementada como lineal o circular. En una lista lineal el ultimo nodo apunta a un valor nulo, mientras en una lista circular el ultimo nodo de la lista apunta al primer nodo de la lista",
            "images": []

        },
        {
            "subtitle":"",
            "body":"Dentro de la clase lista simple podemos encontrar métodos estándar como lo son" ,
            "images": []

        },
        {
            "subtitle":"Insertar",
            "body":"Este método recibe un valor y lo coloca en la última posición de la lista, es decir, crea un nuevo nodo",
            "images": []

        },
        {
            "subtitle":"Eliminar",
            "body":"El método eliminar recibe la posición del nodo que se desea eliminar, al eliminarse, el nodo anterior pasara a apuntar al que el nodo eliminado apuntaba",
            "images": []

        },
        {
            "subtitle":"Buscar",
            "body":"El método buscar recibe un elemento X y busca la posición o posiciones donde se encuentra el elemento",
            "images": []

        },
        {
            "subtitle":"Vacía",
            "body":"Verifica si la lista se encuentra vacía, devuelve un valor booleano",
            "images": []

        },
        {
            "subtitle":"Inicializa",
            "body":"Este método nos servirá para reservar el espacio en memoria",
            "images": []

        },
        {
            "subtitle":"Primero",
            "body":"método que nos devolverá el primer elemento de la misma",
            "images": []

        },
        {
            "subtitle":"Ultimo",
            "body":"Método que nos retorna el ultimo elemento de la lista",
            "images": []

        },
        {
            "subtitle":"Siguiente",
            "body":"De una posición dada nos retorna el siguiente valor en la posición",
            "images": []

        },
        {
            "subtitle":"Anterior",
            "body":"Dada una posición nos retorna el valor anterior en la lista",
            "images": []

        },
        {
            "subtitle":"Tamaño",
            "body":"Retorna el tamaño actual de la lista",
            "images": []

        },
        {
            "subtitle":"Eliminar todo (vaciar)",
            "body":"elimina todos los elementos",
            "images": []

        },
        {
            "subtitle":"Mostrar lista",
            "body":"Imprime la lista en pantalla ",
            "images": []

        }
      ]
    },
    {
      "title": "TDA Lista doblemente ligada",
      "code": "",
      "sources": "https://ccia.ugr.es/~jfv/ed1/tedi/cdrom/docs/ldoble.html",
      "inPutData": {
        "images":[
        ]
      },
      "outPutData": {
        "images":[
        ]
      },
      "data":[
        {
          "subtitle":"",
          "body": "La lista doblemente ligada contiene por lo menos 3 campos: Uno para almacenar la información y otros dos para guardar dirección de memoria del modo antecesor y sucesor.\n          Desde luego que en el primer elemento el nodo antecesor debe de apuntar a un valor nulo en caso de ser una lista lineal.\n          Al igual que en la lista simple podemos encontrar los siguientes métodos:\n          Insertar: recibe un elemento y lo coloca en la ultima posición.\n          Eliminar: recibe la posicion de un elemento, ademas, los nodos del elemento anterior y del sucesor, deben cambiar.\n          Buscar:Recibe un valor y lo busca en los elementos de la lista. En caso de no encontrarlo responde un null\n",
          "images": []
        },
        {
          "subtitle":"Vacia:",
          "body": "Verifica si la lista cuenta con elementos. Retorna un valor booleano.\n",
          "images": []
        },
        {
            "subtitle":"Inicializa:",
            "body":"Reserva un espacio en memoria.\n",
            "images":[]
        },{
            "subtitle":"Primero:",
            "body":"Retorna el primer elemento de la lista.\n",
            "images":[]
        },{
            "subtitle":"Ultimo:",
            "body":"Retorna el ultimo elemento de la lista.\n",
            "images":[]
        },
        {
            "subtitle":"Siguiente:",
            "body":"Dada una posicion, retorna el valor del siguiente elemento.\n",
            "images":[]
        },
        {
            "subtitle":"Anterior:",
            "body":"Dada una posicion retorna el valor anterior.\n",
            "images":[]
        },{
            "subtitle":"Tamaño:",
            "body":"Retorna la cantidad de elementos de una lista.\n",
            "images":[]
        },{
            "subtitle":"Vaciar(eliminar todo):",
            "body": "Borra todos los elementos de la lista.\n",
            "images": []
        },{
            "subtitle":"Mostrar listas:",
            "body":"Imprime en pantalla los elementos de una lista\n",
            "images":[]
        }
      ]
    }
  ]